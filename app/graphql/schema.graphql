schema {
  query: Root
  mutation: Mutation
}

input LoginInput {
  email: String!
  password: String!
  id: String!
  clientMutationId: String
}

type LoginPayload {
  user: User
  clientMutationId: String
}

input LogoutInput {
  id: String
  clientMutationId: String
}

type LogoutPayload {
  user: User
  clientMutationId: String
}

type Mutation {
  register(input: RegisterInput!): RegisterPayload
  login(input: LoginInput!): LoginPayload
  logout(input: LogoutInput!): LogoutPayload
}

interface Node {
  id: ID!
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  image: String!
  role: String!
  clientMutationId: String
}

type RegisterPayload {
  user: User
  clientMutationId: String
}

type Root {
  node(id: ID!): Node
  viewer: Viewer
}

type User implements Node {
  id: ID!
  userId: String
  email: String
  firstName: String
  lastName: String
  image: String
  role: String
}

type Viewer {
  user: User
}
